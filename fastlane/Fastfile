default_platform(:ios)

platform :ios do

  # Apple Connect App
  DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
  BUNDLE_IDENTIFIER = ENV["BUNDLE_IDENTIFIER"]
  TEAM_ID = ENV["TEAM_ID"]
  ITC_TEAM_ID = ENV["ITC_TEAM_ID"]

  # Apple Connect API
  APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
  APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
  APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]

  # Fastlane MATCH
  PROVISIONING_PROFILE = ENV["PROVISIONING_PROFILE"]
  PROVISIONING_PROFILE_ID = ENV["PROVISIONING_PROFILE_ID"]
  MATCH_GIT_BASIC_AUTHORIZATION = ENV["MATCH_GIT_BASIC_AUTHORIZATION"]
  MATCH_PASSWORD = ENV["MATCH_PASSWORD"]

  desc "Setup Web Assets"
  lane :setup_web_assets do
    # Ensure you're in the project root
    Dir.chdir(File.expand_path("../..", __FILE__)) do
      # Install Node.js dependencies
      sh "npm install"

      # Generate the static web app
      sh "npm run generate"

      # Sync Capacitor with native projects
      sh "npx cap sync"
    end
  end
  
  desc "Push a new beta build to TestFlight"
  lane :beta do
    xcodeproj = "./ios/App/App.xcodeproj"
    workspace = "./ios/App/App.xcworkspace"
    pods_project = "./ios/App/Pods/Pods.xcodeproj"
    plist_path = "App/Info.plist"
    scheme = "App"
    ipa = "./Audiobookshelf.ipa"

    setup_ci(force: true)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 500,
      in_house: false
    )

    match(
      type: "appstore",
      readonly: true,
      app_identifier: BUNDLE_IDENTIFIER,
      api_key: api_key,
      profile_name: PROVISIONING_PROFILE,
    )

    setup_web_assets

    latest_testflight_build_number = latest_testflight_build_number(
      app_identifier: BUNDLE_IDENTIFIER,
      api_key: api_key
    )

    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: xcodeproj
    )

    update_app_identifier(
      xcodeproj: xcodeproj,
      plist_path: plist_path,
      app_identifier: BUNDLE_IDENTIFIER
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      path: xcodeproj,
      team_id: TEAM_ID,
      targets: ["App", "Audiobookshelf"],
      build_configurations: ["Release", "Debug"], # Update both configurations
      bundle_identifier: BUNDLE_IDENTIFIER,
      code_sign_identity: "iPhone Distribution",
      profile_name: PROVISIONING_PROFILE
    )

    settings_to_override = {
    :BUNDLE_IDENTIFIER => BUNDLE_IDENTIFIER,
    :PROVISIONING_PROFILE_SPECIFIER => PROVISIONING_PROFILE,
    :DEVELOPMENT_TEAM => TEAM_ID,
    }

    build_app(
      workspace: workspace,
      scheme: scheme,
      export_method: "app-store",
      clean: true,
      export_options: {
        method: "app-store",
        provisioningProfiles: { 
          BUNDLE_IDENTIFIER => "match AppStore #{BUNDLE_IDENTIFIER}"
        },
        signingCertificate: "iPhone Distribution",
        teamID: TEAM_ID
      },
      xcargs: settings_to_override
    )

    pilot(
      apple_id: DEVELOPER_APP_ID,
      app_identifier: BUNDLE_IDENTIFIER,
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: true,
      notify_external_testers: false,
      changelog: "Sync with Audiobookshelf",
      ipa: ipa
    )

  end
end
